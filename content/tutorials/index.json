[{"uri":"/fslabsite/content/tutorials/index.html","title":"The fslab documentation template\n","content":"(**\n# The fslab documentation template\n\nThis template scaffolds the necessary folder structure for FSharp.Formatting \nand adds custom styles in the **fslab** theme. \n\nThe provided stylesheet was compiled from sass (before uploading the nuget package) and\nuses the [Bulma](https://bulma.io/) CSS framework instead of bootstrap which is used by FSharp.Formatting per default.\n\n#### Table of contents \n\n- [Installation](#Installation)\n- [Usage](#Usage)\n- [Quick content rundown](#Quick-content-rundown)\n- [Creating new content](#Creating-new-content)\n- [Customization options](#Customization-options)\n    - [Style sheet options](#Style-sheet-options)\n    - [Inclusion of sample content](#Inclusion-of-sample-content)\n    - [Create notebooks](#Create-notebooks)\n\n\n## Installation\n\nThis template is available as a _dotnet new_ template (from [nuget](https://www.nuget.org/packages/FsLab.DocumentationTemplate/)):\n\n\u0060\u0060\u0060no-highlight\ndotnet new -i FsLab.DocumentationTemplate\n\u0060\u0060\u0060\n\n## Usage\n\nIf not already present, create a _local tool manifest_ in the root of your project that you want to write documentation for:\n\n\u0060\u0060\u0060no-highlight\ndotnet new tool-manifest\n\u0060\u0060\u0060\n\nThen, still in the root of your project, run:\n\n\u0060\u0060\u0060no-highlight\ndotnet new fslab-docs\n\u0060\u0060\u0060\n\n## Quick content rundown:\n\nThe default template initializes the following folder structure when you initialize it in the root of your project.\n\nSee [further below](#Customization-options) for command line customization options of the template.\n\n\u003Cpre\u003E\ndocs\n\u2502   index.fsx\n\u2502   _template.html\n|   _template.ipynb\n|   \n\u2502   0_Markdown-Cheatsheet.md\n\u2502   1_fsharp-code-example.fsx\n\u2502   2_inline-references.fsx\n\u2502   3_notebooks.fsx\n|\n\u251C\u2500\u2500\u2500content\n\u2502   fsdocs-custom.css\n\u2502\n\u251C\u2500\u2500\u2500img\n\u2502       favicon.ico\n\u2502       logo.png\n\u2502\n\u2514\u2500\u2500\u2500reference\n        _template.html\n\u003C/pre\u003E\n\n- \u0060index.fsx\u0060 is the file you are reading just now. It contains the very content you are reading at the moment \nin a markdown block indicated by \u0060(** *)\u0060 guards. It will be rendered as the root \u0060index.html\u0060 file of your documentation.\n\n- \u0060_template.html\u0060 is the root html scaffold (sidebar to the left, script and style loading) where all of the individual docs will be injected into\n\n- \u00600_Markdown-Cheatsheet.md\u0060 is a adaption of [this markdown cheat sheet](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) that shows how to write markdown and showcases the rendered equivalents. It can also be viewed in all its glory [here](https://fslab.org/docs-template/0_Markdown-Cheatsheet.html).\n\n- \u00601_fsharp-code-example.fsx\u0060 is a script file that showcases the syntax highlighting style for F# snippets. It can also be viewed in all its glory [here](https://fslab.org/docs-template/1_fsharp-code-example.html).\n\n- \u00602_inline-references.fsx\u0060 is a script file that explains how to use inline references and use Plotly.NET for charting. It can also be viewed in all its glory [here](https://fslab.org/docs-template/2_inline-references.html).\n\n- \u00603_notebooks.fsx\u0060 is a script file that showcases conditional content in documentation and how to use that to create dotnet interactive notebooks besides your html documentation. It can also be viewed in all its glory [here](https://fslab.org/docs-template/3_notebooks.html).\n\n- \u0060fsdocs-custom.css\u0060 contains the custom styling that applies the fslab styles.\n\n - the \u0060img\u0060 folder contains the fslab logo and favicon. replace these files (with the same names) to youse sours\n\n - \u0060reference/_template.html\u0060 is a slightly adapted version of the template above for the API documentation\n\n## Creating new content\n\n- run \u0060dotnet fsdocs watch --eval\u0060 to spawn a watcher and dev server that hosts your docs on http://localhost:8901/ (You currently will still have to refresh the page when you make changes to files)\n\n- add a new .md or .fsx file to the \u0060content\u0060 directory (or into a new subdirectory there)\n\n- the sidebar title for the document will be either the file name or, if existent, the first level 1 header in the file\n\n- when writing a .fsx file, code will automatically become syntax-highlighted code snippets. \n\n- use \u0060(** \u003Cmarkdown here\u003E *)\u0060 to guard markdown sections in .fsx files\n\n- use \u0060(*** include-value:\u003Cval name\u003E ***)\u0060 to include the value of a binding\n\n- use \u0060(*** include-it ***)\u0060 to include the evaluation of the previous snippet block \n\nFor more info please refer to the [FSharp.Formatting documentation](http://fsprojects.github.io/FSharp.Formatting/).\n\n\n## Customization options\n\n### Style sheet options\n\n\u0060\u0060\u0060no-highlight\n-s|--styles             Set the type of style content the template will initialize. For the sass file to work, you will have to download bulma\n\n        all             - sass file, compiled csss, and minified css\n\n        sass            - only include the sass file\n\n        minified        - only include the minified css file\n\n        css             - only include the compiled css file\n\n        Default:        css\n\u0060\u0060\u0060\n\n### Inclusion of sample content\n\n\u0060\u0060\u0060no-highlight\n-is|--include-samples   wether to include sample files in the generated content\n\n        bool            - Optional\n\n        Default:        true\n\u0060\u0060\u0060\n\n### Create notebooks\n\n\u0060\u0060\u0060no-highlight\n-in|--include-notebooks  wether to include the notebook template file\n        \n        bool            - Optional\n\n        Default:        true\n\u0060\u0060\u0060\n\n*)\n"},{"uri":"/fslabsite/content/tutorials/getting-started.html","title":"Getting started 2\n","content":"(***hide***)\n\n(***condition:prepare***)\n#r \u0022nuget: Deedle\u0022\n#r \u0022nuget: FSharp.Stats\u0022\n#r \u0022nuget: Plotly.NET, 2.0.0-beta5\u0022\n#r \u0022nuget: FSharp.Data\u0022\n\n(***condition:ipynb***)\n#if IPYNB\n#r \u0022nuget: Deedle\u0022\n#r \u0022nuget: FSharp.Stats\u0022\n#r \u0022nuget: Plotly.NET, 2.0.0-beta5\u0022\n#r \u0022nuget: Plotly.NET.Interactive, 2.0.0-beta5\u0022\n#r \u0022nuget: FSharp.Data\u0022\n#endif // IPYNB\n\nopen Deedle\nopen FSharp.Stats\nopen Plotly.NET\nopen FSharp.Data\n\n(**\n# Getting started 2\n\ntry if this compiles? lel\n\nGlad to see you here! Now that you found out and learned about FsLab, this section aims to illustrate how FsLab packages synergize and can be used to tackle\npractical data science challenges. Note that every package used througout the tutorial has its own documentation so if you are interested in Deedle (link), FSharp.Stats or Plotly.Net feel free to take a deeper dive.\n\n## Referencing packages\n\nFsLab is a meant to be a project incubation space and can be thought of as a safe heaven for both, package developers and package users by providing guidelines and tutorials. Packages provided by the community can be used on their own, in combination with other FsLab packages but also in combination with any other .netstandard 2.0 compatible package. From F# 5.0 on packages can be referenced using the following notation:\n\n\u0060\u0060\u0060fsharp\n// Packages hosted by the Fslab community\n#r \u0022nuget: Deedle\u0022\n#r \u0022nuget: FSharp.Stats\u0022\n// third party .net packages \n#r \u0022nuget: Plotly.NET, 2.0.0-beta5\u0022\n#r \u0022nuget: FSharp.Data\u0022\n\u0060\u0060\u0060\n\nafter referencing the packages one can access their namespaces and use provided functions. In the following example we will reference the\ntop level namespaces and then use a function provided by the FSharp.Stats package to calculate a factorial:\n*)\nopen Deedle\nopen FSharp.Stats\nopen Plotly.NET\nopen FSharp.Data\n\nlet factorialOf3 = SpecialFunctions.Factorial.factorial 3\n\n(*** condition: ipynb ***)\n#if IPYNB\nfactorialOf3\n#endif // IPYNB\n\n(***include-value:factorialOf3***)\n\n// (**\n// ## Data access\n// Equipped with these packages we are now ready to tackle promises made in the first paragraph: solving a practical data science problem. We will start by retrieving the data using the FSharp.Data package, subsequently we will use Deedle (link), a powerful data frame library that makes tabular data accessible by data frame programming. (Note that the chosen names give insight on their type, however thanks to FSharp being a strongly typed language and the we can at any time hower over single values to see the assigned type.)\n// *)\n\n// // Retrieve data using the FSharp.Data package\n// let rawData = Http.RequestString @\u0022https://raw.githubusercontent.com/dotnet/machinelearning/master/test/data/housing.txt\u0022\n\n// // Use .net Core functions to convert the retrieved string to a stream\n// let dataAsStream = new System.IO.MemoryStream(rawData |\u003E System.Text.Encoding.UTF8.GetBytes) \n\n// // And finally create a data frame object using the ReadCsv method provided by Deedle.\n// // Note: Of course you can directly provide the path to a local source.\n// let dataAsFrame = Frame.ReadCsv(dataAsStream,hasHeaders=true,separators=\u0022\\t\u0022)\n\n// // Using the Print() method, we can use the Deedle pretty printer to have a look at the data set.\n// dataAsFrame.Print()\n\n// (*** include-output ***)\n\n// (**\n// ## Data crunching\n// The data set of choice is the boston housing data set. As you can see from analyzing the printed output, it consists of 506 rows. Each row represents a house in the boston city area and each column encodes a feature/variable, such as the number of rooms per dwelling (RoomsPerDwelling), Median value of owner-occupied homes in $1000\u0027s (MedianHomeValue) and even variables indicating if the house is bordering river charles (CharlesRiver, value = 1) or not (CharlesRiver, value = 0). \n\n// Lets say in our analysis we are only interested in the variables just described, furthermore we only want to keep rows where the value of the indicator variable is 0. We can use Deedle to easily create a new frame that fullfills our criteria. In this example we also cast the value of the column \u0022CharlesRiver\u0022 to be of type bool, this illustrates how data frame programming can become typesafe using deedle.\n// *)\n\n// let housesNotAtRiver = \n//     dataAsFrame\n//     |\u003E Frame.sliceCols [\u0022RoomsPerDwelling\u0022;\u0022MedianHomeValue\u0022;\u0022CharlesRiver\u0022]\n//     |\u003E Frame.filterRowValues (fun s -\u003E s.GetAs\u003Cbool\u003E(\u0022CharlesRiver\u0022) |\u003E not ) \n\n// //sprintf \u0022The new frame does now contain: %i rows and %i columns\u0022 housesNotAtRiver.RowCount housesNotAtRiver.ColumnCount\n\n// housesNotAtRiver.Print()\n\n// (*** include-output ***)\n\n// (**\n// ## Data exploration\n\n// Exploratory data analysis is an approach favored by many - to meet this demand we strongly advertise the use of Plotly.Net. The following snippet illustrates how we can access a column of a data frame and create an interactive chart in no time. Since we might want an idea of the distribution of the house prices a histogram can come in handy: \n// *)\n\n// // Note that we explicitly specify that we want to work with the values as floats. \n// // Since the row identity is not needed anymore when plotting the distribution we can\n// // directly convert the collection to a FSharp Sequence. \n// let pricesNotAtRiver : seq\u003Cfloat\u003E = \n//     housesNotAtRiver\n//     |\u003E Frame.getCol \u0022MedianHomeValue\u0022\n//     |\u003E Series.values\n    \n// let h1 = \n//     Chart.Histogram(pricesNotAtRiver)\n//     |\u003E Chart.withX_AxisStyle(\u0022median value of owner occupied homes in 1000s\u0022)\n//     |\u003E Chart.withX_AxisStyle(\u0022price distribution\u0022)\n\n// (*** condition: ipynb ***)\n// #if IPYNB\n// h1\n// #endif // IPYNB\n\n// (***hide***)\n// h1 |\u003E GenericChart.toChartHTML\n// (***include-it-raw***)\n\n// (**\n// Since plotly charts are interactive they invite us to combine mutliple charts. Let repeat the filter step and see if houses that are located at the river show a similar distribution:\n// *)\n\n// let housesAtRiver = \n//     dataAsFrame\n//     |\u003E Frame.sliceCols [\u0022RoomsPerDwelling\u0022;\u0022MedianHomeValue\u0022;\u0022CharlesRiver\u0022]\n//     |\u003E Frame.filterRowValues (fun s -\u003E s.GetAs\u003Cbool\u003E(\u0022CharlesRiver\u0022))\n\n// let pricesAtRiver : seq\u003Cfloat\u003E = \n//     housesAtRiver\n//     |\u003E Frame.getCol \u0022MedianHomeValue\u0022\n//     |\u003E Series.values\n\n// let h2 =     \n//     [\n//     Chart.Histogram(pricesNotAtRiver)\n//     |\u003E Chart.withTraceName \u0022not at river\u0022\n//     Chart.Histogram(pricesAtRiver)\n//     |\u003E Chart.withTraceName \u0022at river\u0022\n//     ]\n//     |\u003E Chart.Combine\n//     |\u003E Chart.withX_AxisStyle(\u0022median value of owner occupied homes in 1000s\u0022)\n//     |\u003E Chart.withX_AxisStyle(\u0022Comparison of price distributions\u0022)\n\n// (***hide***)\n// h2 |\u003E GenericChart.toChartHTML\n// (***include-it-raw***)\n\n// (**\n// The interactive chart allows us to compare the distributions directly. We can now reconstruct our own idea of the city of boston, the sampled area, just by looking at the data e.g.:\n\n// Assuming that the sampling process was homogenous while observing that there are much more houses sampled that are not located on the riverside could indicate that a spot on the river is a scarce commodity.\n// This could also be backed by analyzing the tails of the distribution: it seems that houses located at the river are given a head-start in their assigned value - the distribution of the riverside houses is truncated on the left. \n\n// Suppose we would have a customer that wants two models, one to predict the prices of a house at the riverside and one that predicts the prices if this is not the case, then we can meet this demand by using FSharp.Stats in combination with Deedle. Of course we need a variable that is indicative of the house price, in this we will check if the number of rooms per dwelling correlates with the house value:\n// *)\n\n// let pricesAll :Series\u003Cint,float\u003E = \n//     dataAsFrame\n//     |\u003E Frame.getCol \u0022MedianHomeValue\u0022\n\n// let roomsPerDwellingAll :Series\u003Cint,float\u003E = \n//     dataAsFrame\n//     |\u003E Frame.getCol \u0022RoomsPerDwelling\u0022   \n\n// let correlation = \n//     let tmpPrices,tmpRooms = \n//         Series.zipInner pricesAll roomsPerDwellingAll    \n//         |\u003E Series.values \n//         |\u003E Seq.unzip\n//     Correlation.Seq.pearson tmpPrices tmpRooms\n                                              \n// (***include-value:correlation***)\n\n// (**\n// So indeed, the number of rooms per dwelling shows a positiv correlation with the house prices. With a pearson correlation of ~0.7 it does not explain the house prices completely - but this is nothing that really surprises us, as one of our hypothesis is that the location (e.g. riverside) does also have influence on the price -  however, it should be sufficient to create a linear model. \n\n// So now we will use FSharp.Stats to build the two linear models ordered by the hypothetical customer. We start by defining a function that performs the fitting and plots the result:\n// *)\n\n// open Fitting.LinearRegression.OrdinaryLeastSquares\n\n// let predictPricesByRooms description data = \n//     let pricesAll :Series\u003C_,float\u003E = \n//         data\n//         |\u003E Frame.getCol \u0022MedianHomeValue\u0022\n\n//     let roomsPerDwellingAll :Series\u003C_,float\u003E = \n//         data\n//         |\u003E Frame.getCol \u0022RoomsPerDwelling\u0022   \n\n//     let fit = \n//         let tmpRooms, tmpPrices = \n//             Series.zipInner roomsPerDwellingAll pricesAll    \n//             |\u003E Series.sortBy fst\n//             |\u003E Series.values \n//             |\u003E Seq.unzip\n//         let coeffs = Linear.Univariable.coefficient (vector tmpRooms) (vector tmpPrices)\n//         let model  = Linear.Univariable.fit coeffs \n//         let predictedPrices = tmpRooms |\u003E Seq.map model\n//         [\n//         Chart.Point(tmpRooms,tmpPrices)\n//         |\u003E Chart.withTraceName (sprintf \u0022%s: data\u0022 description )\n//         Chart.Line(tmpRooms,predictedPrices)\n//         |\u003E Chart.withTraceName (sprintf \u0022%s: coefficients: intercept:%f, slope:%f\u0022 description coeffs.[0] coeffs.[1])\n//         ]                                  \n//         |\u003E Chart.Combine\n//         |\u003E Chart.withX_AxisStyle(\u0022rooms per dwelling\u0022)\n//         |\u003E Chart.withY_AxisStyle(\u0022median value\u0022)\n//     fit   \n\n// (**\n// Afterwards, we can apply the function on our prepared datasets and have a look at the model and especially the model coefficients. \n// *)\n// let modelVis = \n//     [\n//     predictPricesByRooms \u0022not at river\u0022 housesNotAtRiver\n//     predictPricesByRooms \u0022at river\u0022 housesAtRiver\n//     ]\n//     |\u003E Chart.Combine\n//     |\u003E Chart.withSize(1200.,700.)\n\n// (***hide***)\n// modelVis |\u003E GenericChart.toChartHTML\n// (***include-it-raw***)\n\n\n// (**\n// Both models approximate the data in a reasonable way. When we inspect the coefficients, we see that the models only differ slightly in slope, but have an absolute offset of ~7.5. This observation complements the insights gained by the explorative data analysis approach using the histogram! \n// *)"},{"uri":"/fslabsite/content/tutorials/4_getting-started.html","title":"Getting started\n","content":"(***hide***)\n\n(***condition:prepare***)\n// Packages hosted by the Fslab community\n#r \u0022nuget: Deedle\u0022\n#r \u0022nuget: FSharp.Stats\u0022\n// third party .net packages \n#r \u0022nuget: Plotly.NET, 2.0.0-beta5\u0022\n#r \u0022nuget: Plotly.NET.Interactive, 2.0.0-beta5\u0022\n#r \u0022nuget: FSharp.Data\u0022\n\n(***condition:ipynb***)\n#if IPYNB\n#r \u0022nuget: Deedle\u0022\n#r \u0022nuget: FSharp.Stats\u0022\n#r \u0022nuget: Plotly.NET, 2.0.0-beta5\u0022\n#r \u0022nuget: Plotly.NET.Interactive, 2.0.0-beta5\u0022\n#r \u0022nuget: FSharp.Data\u0022\n#endif // IPYNB\n\nopen Deedle\nopen FSharp.Stats\nopen Plotly.NET\nopen FSharp.Data\n\n(**\n# Getting started\n\nGlad to see you here! Now that you found out and learned about FsLab, this section aims to illustrate how FsLab packages synergize and can be used to tackle\npractical data science challenges. Note that every package used througout the tutorial has its own documentation so if you are interested in Deedle (link), FSharp.Stats or Plotly.Net feel free to take a deeper dive.\n\n## Referencing packages\n\nFsLab is a meant to be a project incubation space and can be thought of as a safe heaven for both, package developers and package users by providing guidelines and tutorials. Packages provided by the community can be used on their own, in combination with other FsLab packages but also in combination with any other .netstandard 2.0 compatible package. From F# 5.0 on packages can be referenced using the following notation:\n\n\u0060\u0060\u0060fsharp\n// Packages hosted by the Fslab community\n#r \u0022nuget: Deedle\u0022\n#r \u0022nuget: FSharp.Stats\u0022\n// third party .net packages \n#r \u0022nuget: Plotly.NET, 2.0.0-beta5\u0022\n#r \u0022nuget: Plotly.NET.Interactive, 2.0.0-beta5\u0022\n#r \u0022nuget: FSharp.Data\u0022\n\u0060\u0060\u0060\n\nafter referencing the packages one can access their namespaces and use provided functions. In the following example we will reference the\ntop level namespaces and then use a function provided by the FSharp.Stats package to calculate a factorial:\n*)\nopen Deedle\nopen FSharp.Stats\nopen Plotly.NET\nopen FSharp.Data\n\nlet factorialOf3 = SpecialFunctions.Factorial.factorial 3\n\n(*** condition: ipynb ***)\n#if IPYNB\nfactorialOf3\n#endif // IPYNB\n\n(***include-value:factorialOf3***)\n\n(**\n## Data access\nEquipped with these packages we are now ready to tackle promises made in the first paragraph: solving a practical data science problem. We will start by retrieving the data using the FSharp.Data package, subsequently we will use Deedle (link), a powerful data frame library that makes tabular data accessible by data frame programming. (Note that the chosen names give insight on their type, however thanks to FSharp being a strongly typed language and the we can at any time hower over single values to see the assigned type.)\n*)\n\n// Retrieve data using the FSharp.Data package\nlet rawData = Http.RequestString @\u0022https://raw.githubusercontent.com/dotnet/machinelearning/master/test/data/housing.txt\u0022\n\n// Use .net Core functions to convert the retrieved string to a stream\nlet dataAsStream = new System.IO.MemoryStream(rawData |\u003E System.Text.Encoding.UTF8.GetBytes) \n\n// And finally create a data frame object using the ReadCsv method provided by Deedle.\n// Note: Of course you can directly provide the path to a local source.\nlet dataAsFrame = Frame.ReadCsv(dataAsStream,hasHeaders=true,separators=\u0022\\t\u0022)\n\n// Using the Print() method, we can use the Deedle pretty printer to have a look at the data set.\ndataAsFrame.Print()\n\n(*** include-output ***)\n\n(**\n## Data crunching\nThe data set of choice is the boston housing data set. As you can see from analyzing the printed output, it consists of 506 rows. Each row represents a house in the boston city area and each column encodes a feature/variable, such as the number of rooms per dwelling (RoomsPerDwelling), Median value of owner-occupied homes in $1000\u0027s (MedianHomeValue) and even variables indicating if the house is bordering river charles (CharlesRiver, value = 1) or not (CharlesRiver, value = 0). \n\nLets say in our analysis we are only interested in the variables just described, furthermore we only want to keep rows where the value of the indicator variable is 0. We can use Deedle to easily create a new frame that fullfills our criteria. In this example we also cast the value of the column \u0022CharlesRiver\u0022 to be of type bool, this illustrates how data frame programming can become typesafe using deedle.\n*)\n\nlet housesNotAtRiver = \n    dataAsFrame\n    |\u003E Frame.sliceCols [\u0022RoomsPerDwelling\u0022;\u0022MedianHomeValue\u0022;\u0022CharlesRiver\u0022]\n    |\u003E Frame.filterRowValues (fun s -\u003E s.GetAs\u003Cbool\u003E(\u0022CharlesRiver\u0022) |\u003E not ) \n\n//sprintf \u0022The new frame does now contain: %i rows and %i columns\u0022 housesNotAtRiver.RowCount housesNotAtRiver.ColumnCount\n\nhousesNotAtRiver.Print()\n\n(*** include-output ***)\n\n(**\n## Data exploration\n\nExploratory data analysis is an approach favored by many - to meet this demand we strongly advertise the use of Plotly.Net. The following snippet illustrates how we can access a column of a data frame and create an interactive chart in no time. Since we might want an idea of the distribution of the house prices a histogram can come in handy: \n*)\n\n// Note that we explicitly specify that we want to work with the values as floats. \n// Since the row identity is not needed anymore when plotting the distribution we can\n// directly convert the collection to a FSharp Sequence. \nlet pricesNotAtRiver : seq\u003Cfloat\u003E = \n    housesNotAtRiver\n    |\u003E Frame.getCol \u0022MedianHomeValue\u0022\n    |\u003E Series.values\n    \nlet h1 = \n    Chart.Histogram(pricesNotAtRiver)\n    |\u003E Chart.withX_AxisStyle(\u0022median value of owner occupied homes in 1000s\u0022)\n    |\u003E Chart.withX_AxisStyle(\u0022price distribution\u0022)\n\n(*** condition: ipynb ***)\n#if IPYNB\nh1\n#endif // IPYNB\n\n(***hide***)\nh1 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nSince plotly charts are interactive they invite us to combine mutliple charts. Let repeat the filter step and see if houses that are located at the river show a similar distribution:\n*)\n\nlet housesAtRiver = \n    dataAsFrame\n    |\u003E Frame.sliceCols [\u0022RoomsPerDwelling\u0022;\u0022MedianHomeValue\u0022;\u0022CharlesRiver\u0022]\n    |\u003E Frame.filterRowValues (fun s -\u003E s.GetAs\u003Cbool\u003E(\u0022CharlesRiver\u0022))\n\nlet pricesAtRiver : seq\u003Cfloat\u003E = \n    housesAtRiver\n    |\u003E Frame.getCol \u0022MedianHomeValue\u0022\n    |\u003E Series.values\n\nlet h2 =     \n    [\n    Chart.Histogram(pricesNotAtRiver)\n    |\u003E Chart.withTraceName \u0022not at river\u0022\n    Chart.Histogram(pricesAtRiver)\n    |\u003E Chart.withTraceName \u0022at river\u0022\n    ]\n    |\u003E Chart.Combine\n    |\u003E Chart.withX_AxisStyle(\u0022median value of owner occupied homes in 1000s\u0022)\n    |\u003E Chart.withX_AxisStyle(\u0022Comparison of price distributions\u0022)\n\n(***hide***)\nh2 |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\nThe interactive chart allows us to compare the distributions directly. We can now reconstruct our own idea of the city of boston, the sampled area, just by looking at the data e.g.:\n\nAssuming that the sampling process was homogenous while observing that there are much more houses sampled that are not located on the riverside could indicate that a spot on the river is a scarce commodity.\nThis could also be backed by analyzing the tails of the distribution: it seems that houses located at the river are given a head-start in their assigned value - the distribution of the riverside houses is truncated on the left. \n\nSuppose we would have a customer that wants two models, one to predict the prices of a house at the riverside and one that predicts the prices if this is not the case, then we can meet this demand by using FSharp.Stats in combination with Deedle. Of course we need a variable that is indicative of the house price, in this we will check if the number of rooms per dwelling correlates with the house value:\n*)\n\nlet pricesAll :Series\u003Cint,float\u003E = \n    dataAsFrame\n    |\u003E Frame.getCol \u0022MedianHomeValue\u0022\n\nlet roomsPerDwellingAll :Series\u003Cint,float\u003E = \n    dataAsFrame\n    |\u003E Frame.getCol \u0022RoomsPerDwelling\u0022   \n\nlet correlation = \n    let tmpPrices,tmpRooms = \n        Series.zipInner pricesAll roomsPerDwellingAll    \n        |\u003E Series.values \n        |\u003E Seq.unzip\n    Correlation.Seq.pearson tmpPrices tmpRooms\n                                              \n(***include-value:correlation***)\n\n(**\nSo indeed, the number of rooms per dwelling shows a positiv correlation with the house prices. With a pearson correlation of ~0.7 it does not explain the house prices completely - but this is nothing that really surprises us, as one of our hypothesis is that the location (e.g. riverside) does also have influence on the price -  however, it should be sufficient to create a linear model. \n\nSo now we will use FSharp.Stats to build the two linear models ordered by the hypothetical customer. We start by defining a function that performs the fitting and plots the result:\n*)\n\nopen Fitting.LinearRegression.OrdinaryLeastSquares\n\nlet predictPricesByRooms description data = \n    let pricesAll :Series\u003C_,float\u003E = \n        data\n        |\u003E Frame.getCol \u0022MedianHomeValue\u0022\n\n    let roomsPerDwellingAll :Series\u003C_,float\u003E = \n        data\n        |\u003E Frame.getCol \u0022RoomsPerDwelling\u0022   \n\n    let fit = \n        let tmpRooms, tmpPrices = \n            Series.zipInner roomsPerDwellingAll pricesAll    \n            |\u003E Series.sortBy fst\n            |\u003E Series.values \n            |\u003E Seq.unzip\n        let coeffs = Linear.Univariable.coefficient (vector tmpRooms) (vector tmpPrices)\n        let model  = Linear.Univariable.fit coeffs \n        let predictedPrices = tmpRooms |\u003E Seq.map model\n        [\n        Chart.Point(tmpRooms,tmpPrices)\n        |\u003E Chart.withTraceName (sprintf \u0022%s: data\u0022 description )\n        Chart.Line(tmpRooms,predictedPrices)\n        |\u003E Chart.withTraceName (sprintf \u0022%s: coefficients: intercept:%f, slope:%f\u0022 description coeffs.[0] coeffs.[1])\n        ]                                  \n        |\u003E Chart.Combine\n        |\u003E Chart.withX_AxisStyle(\u0022rooms per dwelling\u0022)\n        |\u003E Chart.withY_AxisStyle(\u0022median value\u0022)\n    fit   \n\n(**\nAfterwards, we can apply the function on our prepared datasets and have a look at the model and especially the model coefficients. \n*)\nlet modelVis = \n    [\n    predictPricesByRooms \u0022not at river\u0022 housesNotAtRiver\n    predictPricesByRooms \u0022at river\u0022 housesAtRiver\n    ]\n    |\u003E Chart.Combine\n    |\u003E Chart.withSize(1200.,700.)\n\n(***hide***)\nmodelVis |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n\n(**\nBoth models approximate the data in a reasonable way. When we inspect the coefficients, we see that the models only differ slightly in slope, but have an absolute offset of ~7.5. This observation complements the insights gained by the explorative data analysis approach using the histogram! \n*)"},{"uri":"/fslabsite/content/tutorials/1_fsharp-code-example.html","title":"F# code formatting example\n","content":"(**\n# F# code formatting example\n\nThis page is rendered from a F# script as input, containing real F# code besides this markdown section.\n\nhover above some bindings to get tooltips like in a real editor environment.\n\n*)\n\n///this is comment\nlet a = 42\n\n(***include-value:a***)\n\n// see some operators/keywords:\n\nif a \u003E 0 then printfn \u0022see, this is included: %i\u0022 a\n\n// an interface:\ntype IA =\n    abstract member B : string -\u003E string\n\n// an interface implementation:\n\ntype C() =\n    interface IA with\n        member _.B(a) = id a\n\nlet d = C() :\u003E IA\n\nlet e = d.B(\u0022soos\u0022)\n\n(***include-value:e***)\nmodule ThisIsAModule =\n\n    type Union =\n        | First\n        | Second of IA\n\n    type Enum =\n        | First = 1\n        | Second = 2"},{"uri":"/fslabsite/content/tutorials/3_notebooks.html","title":"Including notebooks\n","content":"(***hide***)\n\n(***condition:prepare***)\n#r \u0022nuget: Plotly.NET, 2.0.0-beta5\u0022\n\n(***condition:ipynb***)\n#if IPYNB\n#r \u0022nuget: Plotly.NET, 2.0.0-beta5\u0022\n#r \u0022nuget: Plotly.NET.Interactive, 2.0.0-beta5\u0022\n#endif // IPYNB\n\n(**\n# Including notebooks \n\nTo include dotnet interactive notebooks in the ipynb format, it is enough for the \u0060_template.ipynb\u0060 file to simply exist.\n\nThere are however some customization options with fsdocs that move your documentation to the next level:\n\n## Conditional package references\n\nuse the IPYNB compiler directive in conjuntion with \u0060condition:ipynb\u0060 to include blocks only in the rendered notebook file. \n\nThis is especially usefull for referencing packages that otherwise be referenced locally during yopur buildchain:\n\n*)\n\n(***hide***)\n\u0022\u0022\u0022\n\u003Cpre\u003E\n#r \u0022/path/to/your/binaries/during/local/build\u0022\n\n(***condition:ipynb***)\n#if IPYNB\n#r \u0022nuget: yourProjectOnNuget, 1.3.3.7\u0022\n#endif // IPYNB\n\u003C/pre\u003E\n\u0022\u0022\u0022\n(***include-it-raw***)\n\n(**\n\n## Conditional value inclusion\n\nSometimes the content you want to include might differ aswell. An example is Plotly.NET charts. \nWhile you want to dump the chart html directly into the html docs via (\u0060include-it-raw\u0060), \nyou want to end cells in notebooks with the chart value itself to include the chart in the output cell with Plotly.NET.Interactive. \n\nHere is an example for such an conditional block:\n\n*)\n\n(***hide***)\n\u0022\u0022\u0022\n\u003Cpre\u003E\nopen Plotly.NET\n\nlet myChart = Chart.Point([1.,2.])\n\n(***condition:ipynb***)\n#if IPYNB\nmyChart\n#endif // IPYNB\n\n(***hide***)\nmyChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\u003C/pre\u003E\n\u0022\u0022\u0022\n(***include-it-raw***)\n\nopen Plotly.NET\n\nlet myChart = Chart.Point([1.,2.])\n\n(***condition:ipynb***)\n#if IPYNB\nmyChart\n#endif // IPYNB\n\n(***hide***)\nmyChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\n(**\n## Including binder links\n\n[Binder]() is an awesome project that launches an instance of your notebook given the correct \u0060Dockerfile\u0060 and \u0060nuget.config\u0060, which will be added automatically by the \u0060fsdocs\u0060 tool when you build the docs.\n\nyou can include a binder link like this (supposed you use gh-pages to host your docs):\n\n\u0060\u0060\u0060\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/\u003CYOUR-ORG\u003E/\u003CYOUR-PROJECT\u003E/gh-pages?filepath=\u003CYOUR-DOCS-FILENAME\u003E.ipynb)\n\u0060\u0060\u0060\n\nIn fact, you can use this link here to check the conditionals of this very page in a notebook:\n\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/fslaborg/docs-template/gh-pages?filepath=3_notebooks.ipynb.ipynb)\n\n*)"},{"uri":"/fslabsite/content/tutorials/0_Markdown-Cheatsheet.html","title":"Markdown cheatsheet\n","content":"# Markdown cheatsheet\n\n**Adapted from https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet**\n\nThis is intended as a quick reference and showcase. For more complete info, see [John Gruber\u0027s original spec](http://daringfireball.net/projects/markdown/) and the [Github-flavored Markdown info page](http://github.github.com/github-flavored-markdown/).\n\n### Table of Contents  \n\n- [Headers](#Headers)  \n- [Emphasis](#Emphasis)  \n- [Lists](#Lists)  \n- [Links](#Links)  \n- [Images](#Images)  \n- [Code and Syntax Highlighting](#Code-and-Syntax-Highlighting)  \n- [Tables](#Tables)\n- [Blockquotes](#Blockquotes)  \n- [Inline HTML](#Inline-HTML)  \n- [Horizontal Rule](#Horizontal-Rule)  \n- [Line Breaks](#Line-Breaks)  \n- [YouTube Videos](#YouTube-Videos)  \n\n## Headers\n\n\u0060\u0060\u0060no-highlight\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\nAlt-H1\n======\n\nAlt-H2\n------\n\u0060\u0060\u0060\n\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\nAlt-H1\n======\n\nAlt-H2\n------\n\n## Emphasis\n\n\u0060\u0060\u0060no-highlight\nEmphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n\u0060\u0060\u0060\n\nEmphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n\n## Lists\n\n(In this example, leading and trailing spaces are shown with with dots: \u22C5)\n\n\u0060\u0060\u0060no-highlight\n1. First ordered list item\n2. Another item\n\u22C5\u22C5* Unordered sub-list. \n1. Actual numbers don\u0027t matter, just that it\u0027s a number\n\u22C5\u22C51. Ordered sub-list\n4. And another item.\n\n\u22C5\u22C5\u22C5You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we\u0027ll use three here to also align the raw Markdown).\n\n\u22C5\u22C5\u22C5To have a line break without a paragraph, you will need to use two trailing spaces.\u22C5\u22C5\n\u22C5\u22C5\u22C5Note that this line is separate, but within the same paragraph.\u22C5\u22C5\n\u22C5\u22C5\u22C5(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n\u002B Or pluses\n\u0060\u0060\u0060\n\n1. First ordered list item\n2. Another item\n  * Unordered sub-list. \n1. Actual numbers don\u0027t matter, just that it\u0027s a number\n  1. Ordered sub-list\n4. And another item.\n\n   You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we\u0027ll use three here to also align the raw Markdown).\n\n   To have a line break without a paragraph, you will need to use two trailing spaces.  \n   Note that this line is separate, but within the same paragraph.  \n   (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n\u002B Or pluses\n\n## Links\n\nThere are two ways to create links.\n\n\u0060\u0060\u0060no-highlight\n[I\u0027m an inline-style link](https://www.google.com)\n\n[I\u0027m an inline-style link with title](https://www.google.com \u0022Google\u0027s Homepage\u0022)\n\n[I\u0027m a reference-style link][Arbitrary case-insensitive reference text]\n\n[I\u0027m a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links. \nhttp://www.example.com or \u003Chttp://www.example.com\u003E and sometimes \nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n\u0060\u0060\u0060\n\n[I\u0027m an inline-style link](https://www.google.com)\n\n[I\u0027m an inline-style link with title](https://www.google.com \u0022Google\u0027s Homepage\u0022)\n\n[I\u0027m a reference-style link][Arbitrary case-insensitive reference text]\n\n[I\u0027m a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links. \nhttp://www.example.com or \u003Chttp://www.example.com\u003E and sometimes \nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n\n## Images\n\n\u0060\u0060\u0060no-highlight\nHere\u0027s our logo (hover to see the title text):\n\nInline-style: \n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \u0022Logo Title Text 1\u0022)\n\nReference-style: \n![alt text][logo]\n\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \u0022Logo Title Text 2\u0022\n\u0060\u0060\u0060\n\nHere\u0027s our logo (hover to see the title text):\n\nInline-style: \n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \u0022Logo Title Text 1\u0022)\n\nReference-style: \n![alt text][logo]\n\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png \u0022Logo Title Text 2\u0022\n\n## Code and Syntax Highlighting\n\nCode blocks are part of the Markdown spec, but syntax highlighting isn\u0027t. However, many renderers -- like Github\u0027s and *FSharp.Formatting* -- support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. \n\n\u0060\u0060\u0060no-highlight\nInline \u0060code\u0060 has \u0060back-ticks around\u0060 it.\n\u0060\u0060\u0060\n\nInline \u0060code\u0060 has \u0060back-ticks around\u0060 it.\n\nBlocks of code are either fenced by lines with three back-ticks \u003Ccode\u003E\u0060\u0060\u0060\u003C/code\u003E, or are indented with four spaces. I recommend only using the fenced code blocks -- they\u0027re easier and only they support syntax highlighting.\n\nCurrently, only F# and C# syntax highlighting is supported by FSharp.Formatting. You can write code blocks in markdown like this\n\nF#:\n\n\u003Cpre\u003E\n\u003Ccode\u003E\u0060\u0060\u0060fsharp\u003C/code\u003E\nlet a = 42\n\u003Ccode\u003E\u0060\u0060\u0060\u003C/code\u003E\n\u003C/pre\u003E\n\n\u0060\u0060\u0060fsharp\nlet a = 42\n\u0060\u0060\u0060\n\nOr C#:\n\n\u003Cpre\u003E\n\u003Ccode\u003E\u0060\u0060\u0060csharp\u003C/code\u003E\nvar a = 42\n\u003Ccode\u003E\u0060\u0060\u0060\u003C/code\u003E\n\u003C/pre\u003E\n\n\u0060\u0060\u0060csharp\nvar a = 42\n\u0060\u0060\u0060\n\nFSharp.Formatting will also attempt to highlight snippets that are not in those languages, which will have mixed results\n\n\u003Cpre\u003E\n\u003Ccode\u003E\u0060\u0060\u0060javascript\u003C/code\u003E\nvar s = \u0022JavaScript syntax highlighting\u0022;\nalert(s);\n\u003Ccode\u003E\u0060\u0060\u0060\u003C/code\u003E\n\u003C/pre\u003E\n\n\n\u0060\u0060\u0060javascript\nconst a = 2\nvar s = \u0022JavaScript syntax highlighting? not really.\u0022;\nalert(s);\n// Some javascript keywords that are not detected because they are no equivalents in F#/C#:\nnative\nthrows\ninstanceof\n\u0060\u0060\u0060\n\nHowever, there is way better syntax highlighting and also tooltips available for F# and C# if you use script files for generating those docs instead. See an F# example [here](1_fsharp-code-example.html).\n\n## Tables\n\nTables aren\u0027t part of the core Markdown spec, but FSharp.Formatting supports them. Tables are styled via bulma striped table style.\n\n\u0060\u0060\u0060no-highlight\nColons can be used to align columns.\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\nThere must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don\u0027t need to make the \nraw Markdown line up prettily. You can also use inline Markdown.\n\nMarkdown | Less | Pretty\n--- | --- | ---\n*Still* | \u0060renders\u0060 | **nicely**\n1 | 2 | 3\n\u0060\u0060\u0060\n\nColons can be used to align columns.\n\n| Tables        | Are           | Cool |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\nThere must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u0027t need to make the raw Markdown line up prettily. You can also use inline Markdown.\n\nMarkdown | Less | Pretty\n--- | --- | ---\n*Still* | \u0060renders\u0060 | **nicely**\n1 | 2 | 3\n\n## Blockquotes\n\n\u0060\u0060\u0060no-highlight\n\u003E Blockquotes are very handy in email to emulate reply text.\n\u003E This line is part of the same quote.\n\nQuote break.\n\n\u003E This is a very long line that will still be quoted properly when it wraps. Oh boy let\u0027s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. \n\u0060\u0060\u0060\n\n\u003E Blockquotes are very handy in email to emulate reply text.\n\u003E This line is part of the same quote.\n\nQuote break.\n\n\u003E This is a very long line that will still be quoted properly when it wraps. Oh boy let\u0027s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. \n\n## Inline HTML\n\nYou can also use raw HTML in your Markdown, and it\u0027ll mostly work pretty well. \n\n\u0060\u0060\u0060no-highlight\n\u003Cdl\u003E\n  \u003Cdt\u003EDefinition list\u003C/dt\u003E\n  \u003Cdd\u003EIs something people use sometimes.\u003C/dd\u003E\n\n  \u003Cdt\u003EMarkdown in HTML\u003C/dt\u003E\n  \u003Cdd\u003EDoes *not* work **very** well. Use HTML \u003Cem\u003Etags\u003C/em\u003E.\u003C/dd\u003E\n\u003C/dl\u003E\n\u0060\u0060\u0060\n\n\u003Cdl\u003E\n  \u003Cdt\u003EDefinition list\u003C/dt\u003E\n  \u003Cdd\u003EIs something people use sometimes.\u003C/dd\u003E\n\n  \u003Cdt\u003EMarkdown in HTML\u003C/dt\u003E\n  \u003Cdd\u003EDoes *not* work **very** well. Use HTML \u003Cem\u003Etags\u003C/em\u003E.\u003C/dd\u003E\n\u003C/dl\u003E\n\n## Horizontal Rule\n\n\u0060\u0060\u0060\nThree or more...\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n\u0060\u0060\u0060\n\nThree or more...\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n\n## Line Breaks\n\nMy basic recommendation for learning how line breaks work is to experiment and discover -- hit \u0026lt;Enter\u0026gt; once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You\u0027ll soon learn to get what you want. \u0022Markdown Toggle\u0022 is your friend. \n\nHere are some things to try out:\n\n\u0060\u0060\u0060\nHere\u0027s a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it\u0027s a separate line in the *same paragraph*.\n\u0060\u0060\u0060\n\nHere\u0027s a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also begins a separate paragraph, but...  \nThis line is only separated by a single newline, so it\u0027s a separate line in the *same paragraph*.\n\n## YouTube Videos\n\nThey can\u0027t be added directly but you can add an image with a link to the video like this:\n\n\u0060\u0060\u0060no-highlight\n\u003Ca href=\u0022http://www.youtube.com/watch?feature=player_embedded\u0026v=YOUTUBE_VIDEO_ID_HERE\n\u0022 target=\u0022_blank\u0022\u003E\u003Cimg src=\u0022http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg\u0022 \nalt=\u0022IMAGE ALT TEXT HERE\u0022 width=\u0022240\u0022 height=\u0022180\u0022 border=\u002210\u0022 /\u003E\u003C/a\u003E\n\u0060\u0060\u0060\n\nOr, in pure Markdown, but losing the image sizing and border:\n\n\u0060\u0060\u0060no-highlight\n[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)\n\u0060\u0060\u0060\n\n---\n\nLicense: [CC-BY](https://creativecommons.org/licenses/by/3.0/)"},{"uri":"/fslabsite/content/tutorials/2_inline-references.html","title":"Inline package references and charting\n","content":"(**\n# Inline package references and charting\n\nWith fsdocs 8.0, the tool can roll forward to .net 5, meaning you can use inline package references in the docs scripts:\n*)\n\n#r \u0022nuget: Plotly.NET, 2.0.0-beta5\u0022\n\nopen Plotly.NET\n\nlet myChart = \n    Chart.Line(\n        [\n            1.,1.\n            5.,6.\n            23.,9.\n        ]\n    )\n    |\u003E Chart.withTitle \u0022Hello fsdocs!\u0022\n\n(**\nYou can now also include raw html in your docs scripts with the new \u0060include-it-raw\u0060.\nTo incude the chart html of a Plotly.NET chart and and render it on the docs page, use the \u0060GenericChart.toChartHTML\u0060\nand include the raw output. \n\nthe actual codeblock looks like this:\n\n*)\n(***hide***)\n\u0022\u0022\u0022\n\u003Cpre\u003E\n(***hide***)\nmyChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)\n\u003C/pre\u003E\n\u003C/pre\u003E\n\u0022\u0022\u0022\n(***include-it-raw***)\n\n(**\nHere is the rendered chart:\n*)\n\n(***hide***)\nmyChart |\u003E GenericChart.toChartHTML\n(***include-it-raw***)"}]